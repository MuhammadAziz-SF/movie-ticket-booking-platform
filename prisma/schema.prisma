datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  admin
  super_admin
  user
}

enum SeatType {
  STANDARD
  VIP
  V_VIP
}

enum BookingStatus {
  B_PENDING
  B_CONFIRMED
  B_CANCELLED
}

enum PaymentStatus {
  P_PENDING
  P_SUCCESS
  P_FAILED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Admin {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  password  String
  phone     String   @unique
  status    UserStatus
  role      UserRole @default(admin)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String
  phone     String
  status    UserStatus @default(INACTIVE)
  role      UserRole @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]
}

model Theater {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  screens Screen[]
}

model Screen {
  id        String   @id @default(uuid())
  name      String
  capacity  Int
  theaterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  theater   Theater    @relation(fields: [theaterId], references: [id])
  seats     Seat[]
  showtimes Showtime[]

  @@index([theaterId])
}

model Seat {
  id        String   @id @default(uuid())
  row       String
  number    Int
  price     Int
  type      SeatType @default(STANDARD)
  screenId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  screen  Screen   @relation(fields: [screenId], references: [id])
  tickets Ticket[]

  @@unique([screenId, row, number])
}

model Movie {
  id                String   @id @default(uuid())
  title             String
  description       String
  releaseDate       DateTime
  durationInMinutes Int
  posterUrl         String

  showtimes Showtime[]
}

model Showtime {
  id         String   @id @default(uuid())
  startTime  DateTime
  basePrice  Int
  movieId    String
  screenId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  movie    Movie    @relation(fields: [movieId], references: [id])
  screen   Screen   @relation(fields: [screenId], references: [id])
  bookings Booking[]

  @@index([startTime])
  @@index([movieId])
  @@index([screenId])
}

model Booking {
  id          String        @id @default(uuid())
  status      BookingStatus @default(B_PENDING)
  totalAmount Int
  expiresAt   DateTime
  userId      String
  showtimeId  String
  seatsId     String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  showtime Showtime @relation(fields: [showtimeId], references: [id])
  tickets  Ticket[]
  payments Payment[]

  @@index([status])
  @@index([userId])
  @@index([showtimeId])
}

model Ticket {
  id         String  @id @default(uuid())
  price      Int
  bookingId  String
  seatId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])
  seat    Seat    @relation(fields: [seatId], references: [id])

  @@unique([bookingId, seatId])
  @@index([seatId])
}

model Payment {
  id            String        @id @default(uuid())
  amount        Int       
  paymentMethod String
  transactionId String        @unique 
  status        PaymentStatus @default(P_PENDING)
  bookingId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
}
