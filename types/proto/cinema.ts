// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/cinema.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "cinema";

export interface Movie {
  id: string;
  title: string;
  description: string;
  releaseDate: Timestamp | undefined;
  durationInMinutes: number;
  posterUrl: string;
}

export interface Theater {
  id: string;
  name: string;
  address: string;
  city: string;
  screens: Screen[];
}

export interface Screen {
  id: string;
  name: string;
  capacity: number;
  theaterId: string;
  seats: Seat[];
}

export interface Showtime {
  id: string;
  startTime: Timestamp | undefined;
  basePrice: number;
  movieId: string;
  screenId: string;
}

export interface Seat {
  id: string;
  row: string;
  number: number;
  type: string;
  screenId: string;
}

export interface ShowtimeSeat {
  seatInfo: Seat | undefined;
  isAvailable: boolean;
}

export interface CreateMovieRequest {
  title: string;
  description: string;
  releaseDate: Timestamp | undefined;
  durationInMinutes: number;
  posterUrl: string;
}

export interface GetMovieRequest {
  id: string;
}

export interface ListMoviesRequest {
  filter: Empty | undefined;
}

export interface ListMoviesResponse {
  movies: Movie[];
}

export interface UpdateMovieRequest {
  id: string;
  title?: string | undefined;
  description?: string | undefined;
  releaseDate?: Timestamp | undefined;
  durationInMinutes?: number | undefined;
  posterUrl?: string | undefined;
}

export interface DeleteMovieRequest {
  id: string;
}

export interface CreateTheaterRequest {
  name: string;
  address: string;
  city: string;
}

export interface GetTheaterRequest {
  id: string;
}

export interface ListTheatersRequest {
  city?: string | undefined;
}

export interface ListTheatersResponse {
  theaters: Theater[];
}

export interface UpdateTheaterRequest {
  id: string;
  name?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
}

export interface DeleteTheaterRequest {
  id: string;
}

export interface CreateScreenRequest {
  name: string;
  capacity: number;
  theaterId: string;
}

export interface GetScreenRequest {
  id: string;
}

export interface ListScreensByTheaterRequest {
  theaterId: string;
}

export interface ListScreensResponse {
  screens: Screen[];
}

export interface UpdateScreenRequest {
  id: string;
  name?: string | undefined;
  capacity?: number | undefined;
}

export interface DeleteScreenRequest {
  id: string;
}

export interface CreateShowTimeRequest {
  startTime: Timestamp | undefined;
  basePrice: number;
  movieId: string;
  screenId: string;
}

export interface GetShowTimeRequest {
  id: string;
}

export interface ListShowTimesRequest {
  movieId?: string | undefined;
  theaterId?: string | undefined;
  date?: string | undefined;
}

export interface ListShowTimesResponse {
  showTimes: Showtime[];
}

export interface UpdateShowTimeRequest {
  id: string;
  startTime?: Timestamp | undefined;
  basePrice?: number | undefined;
}

export interface DeleteShowTimeRequest {
  id: string;
}

export interface GetShowtimeSeatsRequest {
  showtimeId: string;
}

export interface GetShowtimeSeatsResponse {
  seats: ShowtimeSeat[];
}

export interface CheckSeatsAvailabilityRequest {
  showtimeId: string;
  seatIds: string[];
}

export interface CheckSeatsAvailabilityResponse {
  areAvailable: boolean;
  unavailableSeatIds: string[];
}

export const CINEMA_PACKAGE_NAME = "cinema";

export interface CinemaServiceClient {
  createMovie(request: CreateMovieRequest): Observable<Movie>;

  getMovie(request: GetMovieRequest): Observable<Movie>;

  listMovies(request: ListMoviesRequest): Observable<ListMoviesResponse>;

  updateMovie(request: UpdateMovieRequest): Observable<Movie>;

  deleteMovie(request: DeleteMovieRequest): Observable<Empty>;

  createTheater(request: CreateTheaterRequest): Observable<Theater>;

  getTheater(request: GetTheaterRequest): Observable<Theater>;

  listTheaters(request: ListTheatersRequest): Observable<ListTheatersResponse>;

  updateTheater(request: UpdateTheaterRequest): Observable<Theater>;

  deleteTheater(request: DeleteTheaterRequest): Observable<Empty>;

  createScreen(request: CreateScreenRequest): Observable<Screen>;

  getScreen(request: GetScreenRequest): Observable<Screen>;

  listScreensByTheater(request: ListScreensByTheaterRequest): Observable<ListScreensResponse>;

  updateScreen(request: UpdateScreenRequest): Observable<Screen>;

  deleteScreen(request: DeleteScreenRequest): Observable<Empty>;

  createShowTime(request: CreateShowTimeRequest): Observable<Showtime>;

  getShowTime(request: GetShowTimeRequest): Observable<Showtime>;

  listShowTimes(request: ListShowTimesRequest): Observable<ListShowTimesResponse>;

  updateShowTime(request: UpdateShowTimeRequest): Observable<Showtime>;

  deleteShowTime(request: DeleteShowTimeRequest): Observable<Empty>;

  getShowtimeSeats(request: GetShowtimeSeatsRequest): Observable<GetShowtimeSeatsResponse>;

  checkSeatsAvailability(request: CheckSeatsAvailabilityRequest): Observable<CheckSeatsAvailabilityResponse>;
}

export interface CinemaServiceController {
  createMovie(request: CreateMovieRequest): Promise<Movie> | Observable<Movie> | Movie;

  getMovie(request: GetMovieRequest): Promise<Movie> | Observable<Movie> | Movie;

  listMovies(
    request: ListMoviesRequest,
  ): Promise<ListMoviesResponse> | Observable<ListMoviesResponse> | ListMoviesResponse;

  updateMovie(request: UpdateMovieRequest): Promise<Movie> | Observable<Movie> | Movie;

  deleteMovie(request: DeleteMovieRequest): void;

  createTheater(request: CreateTheaterRequest): Promise<Theater> | Observable<Theater> | Theater;

  getTheater(request: GetTheaterRequest): Promise<Theater> | Observable<Theater> | Theater;

  listTheaters(
    request: ListTheatersRequest,
  ): Promise<ListTheatersResponse> | Observable<ListTheatersResponse> | ListTheatersResponse;

  updateTheater(request: UpdateTheaterRequest): Promise<Theater> | Observable<Theater> | Theater;

  deleteTheater(request: DeleteTheaterRequest): void;

  createScreen(request: CreateScreenRequest): Promise<Screen> | Observable<Screen> | Screen;

  getScreen(request: GetScreenRequest): Promise<Screen> | Observable<Screen> | Screen;

  listScreensByTheater(
    request: ListScreensByTheaterRequest,
  ): Promise<ListScreensResponse> | Observable<ListScreensResponse> | ListScreensResponse;

  updateScreen(request: UpdateScreenRequest): Promise<Screen> | Observable<Screen> | Screen;

  deleteScreen(request: DeleteScreenRequest): void;

  createShowTime(request: CreateShowTimeRequest): Promise<Showtime> | Observable<Showtime> | Showtime;

  getShowTime(request: GetShowTimeRequest): Promise<Showtime> | Observable<Showtime> | Showtime;

  listShowTimes(
    request: ListShowTimesRequest,
  ): Promise<ListShowTimesResponse> | Observable<ListShowTimesResponse> | ListShowTimesResponse;

  updateShowTime(request: UpdateShowTimeRequest): Promise<Showtime> | Observable<Showtime> | Showtime;

  deleteShowTime(request: DeleteShowTimeRequest): void;

  getShowtimeSeats(
    request: GetShowtimeSeatsRequest,
  ): Promise<GetShowtimeSeatsResponse> | Observable<GetShowtimeSeatsResponse> | GetShowtimeSeatsResponse;

  checkSeatsAvailability(
    request: CheckSeatsAvailabilityRequest,
  ):
    | Promise<CheckSeatsAvailabilityResponse>
    | Observable<CheckSeatsAvailabilityResponse>
    | CheckSeatsAvailabilityResponse;
}

export function CinemaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createMovie",
      "getMovie",
      "listMovies",
      "updateMovie",
      "deleteMovie",
      "createTheater",
      "getTheater",
      "listTheaters",
      "updateTheater",
      "deleteTheater",
      "createScreen",
      "getScreen",
      "listScreensByTheater",
      "updateScreen",
      "deleteScreen",
      "createShowTime",
      "getShowTime",
      "listShowTimes",
      "updateShowTime",
      "deleteShowTime",
      "getShowtimeSeats",
      "checkSeatsAvailability",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CinemaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CinemaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CINEMA_SERVICE_NAME = "CinemaService";
