// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/booking.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "booking";

export enum BookingStatus {
  B_PENDING = 0,
  B_CONFIRMED = 1,
  B_CANCELLED = 2,
  UNRECOGNIZED = -1,
}

export enum PaymentStatus {
  P_PENDING = 0,
  P_SUCCESS = 1,
  P_FAILED = 2,
  UNRECOGNIZED = -1,
}

export interface Pagination {
  page: number;
  limit: number;
}

export interface Sort {
  sortBy: string;
  order: string;
}

export interface StatusResponse {
  success: boolean;
  message: string;
}

export interface Ticket {
  id: string;
  price: number;
  bookingId: string;
  seatId: string;
  createdAt: string;
  updatedAt: string;
}

export interface Booking {
  id: string;
  status: BookingStatus;
  totalAmount: number;
  expiresAt: string;
  userId: string;
  showtimeId: string;
  createdAt: string;
  updatedAt: string;
}

export interface BookingFilter {
  userId?: string | undefined;
  status?: BookingStatus | undefined;
  showtimeId?: string | undefined;
}

export interface TicketFilter {
  bookingId?: string | undefined;
  seatId?: string | undefined;
}

export interface CreateBookingRequest {
  userId: string;
  showtimeId: string;
  totalAmount: number;
  expiresAt: string;
  seatsId: string[];
}

export interface CreateBookingResponse {
  booking: Booking | undefined;
}

export interface GetBookingRequest {
  id: string;
}

export interface GetBookingResponse {
  booking: Booking | undefined;
}

export interface UpdateBookingRequest {
  id: string;
  status?: BookingStatus | undefined;
  totalAmount?: number | undefined;
  expiresAt?: string | undefined;
}

export interface UpdateBookingResponse {
  booking: Booking | undefined;
}

export interface DeleteBookingRequest {
  id: string;
}

export interface DeleteBookingResponse {
  result: StatusResponse | undefined;
}

export interface ListBookingsRequest {
  pagination: Pagination | undefined;
  sort: Sort | undefined;
}

export interface ListBookingsResponse {
  bookings: Booking[];
  total: number;
}

export interface FilterBookingsRequest {
  filter: BookingFilter | undefined;
  pagination: Pagination | undefined;
  sort: Sort | undefined;
}

export interface FilterBookingsResponse {
  bookings: Booking[];
  total: number;
}

export interface CreateTicketRequest {
  ticket: Ticket | undefined;
}

export interface CreateTicketResponse {
  ticket: Ticket | undefined;
}

export interface GetTicketRequest {
  id: string;
}

export interface GetTicketResponse {
  ticket: Ticket | undefined;
}

export interface UpdateTicketRequest {
  id: string;
  price?: number | undefined;
  seatId?: string | undefined;
}

export interface UpdateTicketResponse {
  ticket: Ticket | undefined;
}

export interface DeleteTicketRequest {
  id: string;
}

export interface DeleteTicketResponse {
  result: StatusResponse | undefined;
}

export interface ListTicketsRequest {
  pagination: Pagination | undefined;
  sort: Sort | undefined;
}

export interface ListTicketsResponse {
  tickets: Ticket[];
  total: number;
}

export interface FilterTicketsRequest {
  filter: TicketFilter | undefined;
  pagination: Pagination | undefined;
  sort: Sort | undefined;
}

export interface FilterTicketsResponse {
  tickets: Ticket[];
  total: number;
}

export const BOOKING_PACKAGE_NAME = "booking";

export interface BookingServiceClient {
  createBooking(request: CreateBookingRequest): Observable<CreateBookingResponse>;

  getBooking(request: GetBookingRequest): Observable<GetBookingResponse>;

  updateBooking(request: UpdateBookingRequest): Observable<UpdateBookingResponse>;

  deleteBooking(request: DeleteBookingRequest): Observable<DeleteBookingResponse>;

  listBookings(request: ListBookingsRequest): Observable<ListBookingsResponse>;

  filterBookings(request: FilterBookingsRequest): Observable<FilterBookingsResponse>;

  createTicket(request: CreateTicketRequest): Observable<CreateTicketResponse>;

  getTicket(request: GetTicketRequest): Observable<GetTicketResponse>;

  updateTicket(request: UpdateTicketRequest): Observable<UpdateTicketResponse>;

  deleteTicket(request: DeleteTicketRequest): Observable<DeleteTicketResponse>;

  listTickets(request: ListTicketsRequest): Observable<ListTicketsResponse>;

  filterTickets(request: FilterTicketsRequest): Observable<FilterTicketsResponse>;
}

export interface BookingServiceController {
  createBooking(
    request: CreateBookingRequest,
  ): Promise<CreateBookingResponse> | Observable<CreateBookingResponse> | CreateBookingResponse;

  getBooking(
    request: GetBookingRequest,
  ): Promise<GetBookingResponse> | Observable<GetBookingResponse> | GetBookingResponse;

  updateBooking(
    request: UpdateBookingRequest,
  ): Promise<UpdateBookingResponse> | Observable<UpdateBookingResponse> | UpdateBookingResponse;

  deleteBooking(
    request: DeleteBookingRequest,
  ): Promise<DeleteBookingResponse> | Observable<DeleteBookingResponse> | DeleteBookingResponse;

  listBookings(
    request: ListBookingsRequest,
  ): Promise<ListBookingsResponse> | Observable<ListBookingsResponse> | ListBookingsResponse;

  filterBookings(
    request: FilterBookingsRequest,
  ): Promise<FilterBookingsResponse> | Observable<FilterBookingsResponse> | FilterBookingsResponse;

  createTicket(
    request: CreateTicketRequest,
  ): Promise<CreateTicketResponse> | Observable<CreateTicketResponse> | CreateTicketResponse;

  getTicket(request: GetTicketRequest): Promise<GetTicketResponse> | Observable<GetTicketResponse> | GetTicketResponse;

  updateTicket(
    request: UpdateTicketRequest,
  ): Promise<UpdateTicketResponse> | Observable<UpdateTicketResponse> | UpdateTicketResponse;

  deleteTicket(
    request: DeleteTicketRequest,
  ): Promise<DeleteTicketResponse> | Observable<DeleteTicketResponse> | DeleteTicketResponse;

  listTickets(
    request: ListTicketsRequest,
  ): Promise<ListTicketsResponse> | Observable<ListTicketsResponse> | ListTicketsResponse;

  filterTickets(
    request: FilterTicketsRequest,
  ): Promise<FilterTicketsResponse> | Observable<FilterTicketsResponse> | FilterTicketsResponse;
}

export function BookingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createBooking",
      "getBooking",
      "updateBooking",
      "deleteBooking",
      "listBookings",
      "filterBookings",
      "createTicket",
      "getTicket",
      "updateTicket",
      "deleteTicket",
      "listTickets",
      "filterTickets",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOOKING_SERVICE_NAME = "BookingService";
