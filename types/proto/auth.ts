// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export enum UserRole {
  USER = 0,
  ADMIN = 1,
  SUPER_ADMIN = 2,
  UNRECOGNIZED = -1,
}

export interface Admin {
  id: string;
  fullName: string;
  email: string;
  role: string;
}

export interface User {
  id: string;
  fullName: string;
  email: string;
  phone: string;
}

export interface CreateAdminReq {
  fullName: string;
  email: string;
  password: string;
  role: string;
}

export interface CreateAdminRes {
}

export interface AdminLoginReq {
  email: string;
  password: string;
}

export interface AdminLoginRes {
  otp: number;
  message: string;
}

export interface AdminConfirmLoginReq {
  email: string;
  otp: string;
}

export interface AdminConfirmLoginRes {
  success: boolean;
  message: string;
}

export interface AdminLogoutReq {
}

export interface AdminLogoutRes {
  success: boolean;
  message: string;
}

export interface AdminFindAllReq {
  page: number;
  limit: number;
}

export interface AdminFindAllRes {
  admins: Admin[];
  total: number;
  page: number;
  limit: number;
}

export interface AdminFindOneReq {
  id: string;
}

export interface AdminFindOneRes {
  admin: Admin | undefined;
}

export interface AdminUpdateReq {
  id: string;
  password?: string | undefined;
  fullName?: string | undefined;
  email?: string | undefined;
  role?: UserRole | undefined;
}

export interface AdminUpdateRes {
  admin: Admin | undefined;
}

export interface AdminDeleteReq {
  id: string;
}

export interface AdminDeleteRes {
  success: boolean;
  message: string;
}

export interface SignUpUserReq {
  fullName: string;
  email: string;
  password: string;
  phone?: string | undefined;
}

export interface SignUpUserRes {
  otp: number;
  message: string;
}

export interface UserLoginReq {
  email: string;
  password: string;
}

export interface UserLoginRes {
  otp: number;
  message: string;
}

export interface UserConfirmLoginReq {
  otp: number;
  email: string;
}

export interface UserConfirmLoginRes {
  success: boolean;
  message: string;
}

export interface UserConfirmSignUpReq {
  email: string;
  otp: number;
}

export interface UserConfirmSignUpRes {
  success: boolean;
  message: string;
}

export interface UserUpdateReq {
  id: string;
  fullName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
}

export interface UserUpdateRes {
  user: User | undefined;
}

export interface UserDeleteReq {
  id: string;
}

export interface UserDeleteRes {
  success: boolean;
  message: string;
}

export interface UserFindAllReq {
  page: number;
  limit: number;
}

export interface UserFindAllRes {
  users: User[];
  total: number;
  page: number;
  limit: number;
}

export interface UserFindOneReq {
  id: string;
}

export interface UserFindOneRes {
  user: User | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  createAdmin(request: CreateAdminReq): Observable<CreateAdminRes>;

  adminLogin(request: AdminLoginReq): Observable<AdminLoginRes>;

  adminConfirmLogin(request: AdminConfirmLoginReq): Observable<AdminConfirmLoginRes>;

  adminLogout(request: AdminLogoutReq): Observable<AdminLogoutRes>;

  adminFindAll(request: AdminFindAllReq): Observable<AdminFindAllRes>;

  adminFindOne(request: AdminFindOneReq): Observable<AdminFindOneRes>;

  adminUpdate(request: AdminUpdateReq): Observable<AdminUpdateRes>;

  adminDelete(request: AdminDeleteReq): Observable<AdminDeleteRes>;

  signUpUser(request: SignUpUserReq): Observable<SignUpUserRes>;

  userLogin(request: UserLoginReq): Observable<UserLoginRes>;

  userConfirmLogin(request: UserConfirmLoginReq): Observable<UserConfirmLoginRes>;

  userConfirmSignUp(request: UserConfirmSignUpReq): Observable<UserConfirmSignUpRes>;

  userUpdate(request: UserUpdateReq): Observable<UserUpdateRes>;

  userDelete(request: UserDeleteReq): Observable<UserDeleteRes>;

  userFindAll(request: UserFindAllReq): Observable<UserFindAllRes>;

  userFindOne(request: UserFindOneReq): Observable<UserFindOneRes>;
}

export interface AuthServiceController {
  createAdmin(request: CreateAdminReq): Promise<CreateAdminRes> | Observable<CreateAdminRes> | CreateAdminRes;

  adminLogin(request: AdminLoginReq): Promise<AdminLoginRes> | Observable<AdminLoginRes> | AdminLoginRes;

  adminConfirmLogin(
    request: AdminConfirmLoginReq,
  ): Promise<AdminConfirmLoginRes> | Observable<AdminConfirmLoginRes> | AdminConfirmLoginRes;

  adminLogout(request: AdminLogoutReq): Promise<AdminLogoutRes> | Observable<AdminLogoutRes> | AdminLogoutRes;

  adminFindAll(request: AdminFindAllReq): Promise<AdminFindAllRes> | Observable<AdminFindAllRes> | AdminFindAllRes;

  adminFindOne(request: AdminFindOneReq): Promise<AdminFindOneRes> | Observable<AdminFindOneRes> | AdminFindOneRes;

  adminUpdate(request: AdminUpdateReq): Promise<AdminUpdateRes> | Observable<AdminUpdateRes> | AdminUpdateRes;

  adminDelete(request: AdminDeleteReq): Promise<AdminDeleteRes> | Observable<AdminDeleteRes> | AdminDeleteRes;

  signUpUser(request: SignUpUserReq): Promise<SignUpUserRes> | Observable<SignUpUserRes> | SignUpUserRes;

  userLogin(request: UserLoginReq): Promise<UserLoginRes> | Observable<UserLoginRes> | UserLoginRes;

  userConfirmLogin(
    request: UserConfirmLoginReq,
  ): Promise<UserConfirmLoginRes> | Observable<UserConfirmLoginRes> | UserConfirmLoginRes;

  userConfirmSignUp(
    request: UserConfirmSignUpReq,
  ): Promise<UserConfirmSignUpRes> | Observable<UserConfirmSignUpRes> | UserConfirmSignUpRes;

  userUpdate(request: UserUpdateReq): Promise<UserUpdateRes> | Observable<UserUpdateRes> | UserUpdateRes;

  userDelete(request: UserDeleteReq): Promise<UserDeleteRes> | Observable<UserDeleteRes> | UserDeleteRes;

  userFindAll(request: UserFindAllReq): Promise<UserFindAllRes> | Observable<UserFindAllRes> | UserFindAllRes;

  userFindOne(request: UserFindOneReq): Promise<UserFindOneRes> | Observable<UserFindOneRes> | UserFindOneRes;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createAdmin",
      "adminLogin",
      "adminConfirmLogin",
      "adminLogout",
      "adminFindAll",
      "adminFindOne",
      "adminUpdate",
      "adminDelete",
      "signUpUser",
      "userLogin",
      "userConfirmLogin",
      "userConfirmSignUp",
      "userUpdate",
      "userDelete",
      "userFindAll",
      "userFindOne",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
